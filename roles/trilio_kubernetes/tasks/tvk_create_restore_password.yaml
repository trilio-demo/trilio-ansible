# code: language=ansible

# Set of tasks for creating performing a Trilio for Kubernetes Restore when using password auth
#
# Authors: Kevin Jackson <kevin.jackson at trilio io>

- name: Configure the restore from {{ tvk_backupplan_name }}
  ansible.builtin.template:
    src: templates/restore.yaml.j2
    dest: /tmp/{{ tvk_backupplan_name }}-restore.yaml
    mode: 0640

- name: Set restore name
  ansible.builtin.set_fact:
    tvk_restore_name: "{{ tvk_backupplan_name | join('-') }} {{ ansible_date_time.date | join('-') }} {{ ansible_date_time.epoch }}"

# Execute the specified backup restore in specifed namespace
- name: Execute the restore of {{ tvk_restore_name }}
  kubernetes.core.k8s:
    api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
    kind: Restore
    state: present
    namespace: "{{ tvk_restore_namespace }}"
    src: "/tmp/{{ tvk_backupplan_name }}-restore.yaml"
    validate_certs: false
  register: restore

- name: Wait for restore of {{ tvk_restore_name }}
  when:
    - k8s_auth_type == "password"
    - k8s_distro == "openshift"
  ansible.builtin.shell: |
    oc login "{{ k8s_auth_api }}" --token="{{ openshift_auth_results.openshift_auth.api_key }}" --insecure-skip-tls-verify=true 2>&/dev/null
    oc get restores/{{ tvk_backupplan_name }}-restore -n {{ tvk_restore_namespace }}
  register: restore_available
  retries: "{{ tvk_restore_polling_retries }}"
  delay: "{{ tvk_restore_polling_every_seconds }}"
  until: restore_available.stdout.find("Completed") != -1
  ignore_errors: true

- name: Show restore output
  ansible.builtin.debug:
    var: restore_available.stdout_lines
